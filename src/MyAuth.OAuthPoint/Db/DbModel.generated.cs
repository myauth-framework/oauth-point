//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace MyAuth.OAuthPoint.Db
{
	/// <summary>
	/// Database       : myauth-sso
	/// Data Source    : localhost
	/// Server Version : 8.0.26
	/// </summary>
	public partial class MyAuthOAuthPointDb : LinqToDB.Data.DataConnection
	{
		/// <summary>
		/// Session scope claims
		/// </summary>
		public ITable<Claim>             Claims             { get { return this.GetTable<Claim>(); } }
		/// <summary>
		/// Contains login sessions
		/// </summary>
		public ITable<LoginSession>      LoginSessions      { get { return this.GetTable<LoginSession>(); } }
		/// <summary>
		/// Info about session initiation
		/// </summary>
		public ITable<SessionInitiation> SessionInitiations { get { return this.GetTable<SessionInitiation>(); } }
		/// <summary>
		/// Scopes which related to sessions
		/// </summary>
		public ITable<SessionScope>      SessionScopes      { get { return this.GetTable<SessionScope>(); } }

		public MyAuthOAuthPointDb()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MyAuthOAuthPointDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MyAuthOAuthPointDb(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MyAuthOAuthPointDb(LinqToDbConnectionOptions<MyAuthOAuthPointDb> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	/// <summary>
	/// Session scope claims
	/// </summary>
	[Table("claims")]
	public partial class Claim
	{
		/// <summary>
		/// Claim identifier
		/// </summary>
		[Column("id"),            PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column("session_scope"), NotNull             ] public int    SessionScope { get; set; } // int
		/// <summary>
		/// Claim name
		/// </summary>
		[Column("name"),          NotNull             ] public string Name         { get; set; } // varchar(50)
		/// <summary>
		/// CLaim value
		/// </summary>
		[Column("value"),         NotNull             ] public string Value        { get; set; } // varchar(1024)

		#region Associations

		/// <summary>
		/// FK_Claim_To_SessionScope
		/// </summary>
		[Association(ThisKey="SessionScope", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Claim_To_SessionScope", BackReferenceName="ClaimToSessionScopes")]
		public SessionScope ClaimToSessionScope { get; set; }

		#endregion
	}

	/// <summary>
	/// Contains login sessions
	/// </summary>
	[Table("login_sessions")]
	public partial class LoginSession
	{
		/// <summary>
		/// Session identifier (GUID)
		/// </summary>
		[Column("id"),        PrimaryKey,  NotNull] public string    Id       { get; set; } // char(32)
		/// <summary>
		/// Expiration time
		/// </summary>
		[Column("expiry"),                 NotNull] public DateTime  Expiry   { get; set; } // datetime
		/// <summary>
		/// Client identifier (GUID)
		/// </summary>
		[Column("client_id"),              NotNull] public string    ClientId { get; set; } // char(32)
		/// <summary>
		/// When user login successfully
		/// </summary>
		[Column("login_dt"),     Nullable         ] public DateTime? LoginDt  { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_SessScope_To_Session_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SessionId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SessionScope> SessScopeToSessions { get; set; }

		#endregion
	}

	/// <summary>
	/// Info about session initiation
	/// </summary>
	[Table("session_initiations")]
	public partial class SessionInitiation
	{
		/// <summary>
		/// Session identifier (GUID)
		/// </summary>
		[Column("session_id"),         PrimaryKey,  NotNull] public string    SessionId         { get; set; } // char(32)
		/// <summary>
		/// Redirect URI from request
		/// </summary>
		[Column("redirect_uri"),                    NotNull] public string    RedirectUri       { get; set; } // varchar(2048)
		/// <summary>
		/// Statefrom request
		/// </summary>
		[Column("state"),                 Nullable         ] public string    State             { get; set; } // varchar(512)
		/// <summary>
		/// Issued authorization code (GUID)
		/// </summary>
		[Column("authorization_code"),    Nullable         ] public string    AuthorizationCode { get; set; } // char(32)
		/// <summary>
		/// Error code (from specification)
		/// </summary>
		[Column("error_code"),            Nullable         ] public string    ErrorCode         { get; set; } // varchar(50)
		/// <summary>
		/// Error description
		/// </summary>
		[Column("erro_desription"),       Nullable         ] public string    ErroDesription    { get; set; } // varchar(1024)
		/// <summary>
		/// When initiation was completed
		/// </summary>
		[Column("complete_dt"),           Nullable         ] public DateTime? CompleteDt        { get; set; } // datetime
	}

	/// <summary>
	/// Scopes which related to sessions
	/// </summary>
	[Table("session_scopes")]
	public partial class SessionScope
	{
		[Column("id"),         PrimaryKey, Identity] public int    Id        { get; set; } // int
		/// <summary>
		/// Session identifier (GUID)
		/// </summary>
		[Column("session_id"), NotNull             ] public string SessionId { get; set; } // char(32)
		/// <summary>
		/// Scope name
		/// </summary>
		[Column("name"),       NotNull             ] public string Name      { get; set; } // varchar(50)
		/// <summary>
		/// &apos;Y&apos; if scope contains in required scope list. Else - auth server send it but will be ignored
		/// </summary>
		[Column("requierd"),   NotNull             ] public char   Requierd  { get; set; } // enum('Y','N')

		#region Associations

		/// <summary>
		/// FK_Claim_To_SessionScope_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SessionScope", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Claim> ClaimToSessionScopes { get; set; }

		/// <summary>
		/// FK_SessScope_To_Session
		/// </summary>
		[Association(ThisKey="SessionId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_SessScope_To_Session", BackReferenceName="SessScopeToSessions")]
		public LoginSession Session { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Claim Find(this ITable<Claim> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LoginSession Find(this ITable<LoginSession> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SessionInitiation Find(this ITable<SessionInitiation> table, string SessionId)
		{
			return table.FirstOrDefault(t =>
				t.SessionId == SessionId);
		}

		public static SessionScope Find(this ITable<SessionScope> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
