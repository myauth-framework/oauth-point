//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace MyAuth.OAuthPoint.Db
{
	/// <summary>
	/// Database       : myauth-sso
	/// Data Source    : localhost
	/// Server Version : 8.0.26
	/// </summary>
	public partial class MyAuthOAuthPointDb : LinqToDB.Data.DataConnection
	{
		/// <summary>
		/// Session scope claims
		/// </summary>
		public ITable<ClaimDb>             Claims             { get { return this.GetTable<ClaimDb>(); } }
		/// <summary>
		/// Registered clients
		/// </summary>
		public ITable<ClientDb>            Clients            { get { return this.GetTable<ClientDb>(); } }
		/// <summary>
		/// Alowed client redirect URIs
		/// </summary>
		public ITable<ClientRedirectUriDb> ClientRedirectUris { get { return this.GetTable<ClientRedirectUriDb>(); } }
		/// <summary>
		/// Scopes allowed for client
		/// </summary>
		public ITable<ClientScopeDb>       ClientScopes       { get { return this.GetTable<ClientScopeDb>(); } }
		/// <summary>
		/// Contains login sessions
		/// </summary>
		public ITable<LoginSessionDb>      LoginSessions      { get { return this.GetTable<LoginSessionDb>(); } }
		/// <summary>
		/// Info about session initiation
		/// </summary>
		public ITable<SessionInitiationDb> SessionInitiations { get { return this.GetTable<SessionInitiationDb>(); } }
		/// <summary>
		/// Scopes which related to sessions
		/// </summary>
		public ITable<SessionScopeDb>      SessionScopes      { get { return this.GetTable<SessionScopeDb>(); } }

		public MyAuthOAuthPointDb()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MyAuthOAuthPointDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MyAuthOAuthPointDb(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MyAuthOAuthPointDb(LinqToDbConnectionOptions<MyAuthOAuthPointDb> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	/// <summary>
	/// Session scope claims
	/// </summary>
	[Table("claims")]
	public partial class ClaimDb
	{
		/// <summary>
		/// Claim identifier
		/// </summary>
		[Column("id"),            PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column("session_scope"), NotNull             ] public int    SessionScope { get; set; } // int
		/// <summary>
		/// Claim name
		/// </summary>
		[Column("name"),          NotNull             ] public string Name         { get; set; } // varchar(50)
		/// <summary>
		/// CLaim value
		/// </summary>
		[Column("value"),         NotNull             ] public string Value        { get; set; } // varchar(1024)

		#region Associations

		/// <summary>
		/// FK_Claim_To_SessionScope
		/// </summary>
		[Association(ThisKey="SessionScope", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Claim_To_SessionScope", BackReferenceName="ClaimToSessionScopes")]
		public SessionScopeDb ClaimToSessionScope { get; set; }

		#endregion
	}

	/// <summary>
	/// Registered clients
	/// </summary>
	[Table("clients")]
	public partial class ClientDb
	{
		/// <summary>
		/// Client identifier (Guid)
		/// </summary>
		[Column("id"),      PrimaryKey,  NotNull] public string Id      { get; set; } // char(32)
		/// <summary>
		/// Name
		/// </summary>
		[Column("name"),                 NotNull] public string Name    { get; set; } // varchar(50)
		/// <summary>
		/// Is enabled
		/// </summary>
		[Column("enabled"),              NotNull] public char   Enabled { get; set; } // enum('Y','N')
		/// <summary>
		/// Is deleted
		/// </summary>
		[Column("deleted"),    Nullable         ] public char?  Deleted { get; set; } // enum('Y','N')

		#region Associations

		/// <summary>
		/// RedirectUriToClient_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientRedirectUriDb> RedirectUriToClients { get; set; }

		/// <summary>
		/// ScopesToClient_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientScopeDb> ScopesToClients { get; set; }

		#endregion
	}

	/// <summary>
	/// Alowed client redirect URIs
	/// </summary>
	[Table("client_redirect_uri")]
	public partial class ClientRedirectUriDb
	{
		/// <summary>
		/// Row identifier
		/// </summary>
		[Column("id"),        PrimaryKey, Identity] public int    Id       { get; set; } // int
		/// <summary>
		/// Client identifier
		/// </summary>
		[Column("client_id"), NotNull             ] public string ClientId { get; set; } // char(32)
		/// <summary>
		/// URI value
		/// </summary>
		[Column("uri"),       NotNull             ] public string Uri      { get; set; } // varchar(2048)

		#region Associations

		/// <summary>
		/// RedirectUriToClient
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="RedirectUriToClient", BackReferenceName="RedirectUriToClients")]
		public ClientDb Client { get; set; }

		#endregion
	}

	/// <summary>
	/// Scopes allowed for client
	/// </summary>
	[Table("client_scopes")]
	public partial class ClientScopeDb
	{
		/// <summary>
		/// Row identifier
		/// </summary>
		[Column("id"),         PrimaryKey, Identity] public int    Id        { get; set; } // int
		/// <summary>
		/// Client identifier
		/// </summary>
		[Column("client_id"),  NotNull             ] public string ClientId  { get; set; } // char(32)
		/// <summary>
		/// Scope name
		/// </summary>
		[Column("scope_name"), NotNull             ] public string ScopeName { get; set; } // varchar(50)

		#region Associations

		/// <summary>
		/// ScopesToClient
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ScopesToClient", BackReferenceName="ScopesToClients")]
		public ClientDb Client { get; set; }

		#endregion
	}

	/// <summary>
	/// Contains login sessions
	/// </summary>
	[Table("login_sessions")]
	public partial class LoginSessionDb
	{
		/// <summary>
		/// Session identifier (GUID)
		/// </summary>
		[Column("id"),        PrimaryKey,  NotNull] public string    Id       { get; set; } // char(32)
		/// <summary>
		/// Expiration time
		/// </summary>
		[Column("expiry"),                 NotNull] public DateTime  Expiry   { get; set; } // datetime
		/// <summary>
		/// Client identifier (GUID)
		/// </summary>
		[Column("client_id"),              NotNull] public string    ClientId { get; set; } // char(32)
		/// <summary>
		/// When subject authorized successfully
		/// </summary>
		[Column("login_dt"),     Nullable         ] public DateTime? LoginDt  { get; set; } // datetime
		/// <summary>
		/// Authorized subject identifier
		/// </summary>
		[Column("subject"),      Nullable         ] public string    Subject  { get; set; } // varchar(50)

		#region Associations

		/// <summary>
		/// FK_Initiation_To_Session_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SessionId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
		public SessionInitiationDb InitiationToSession { get; set; }

		/// <summary>
		/// FK_SessScope_To_Session_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SessionId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SessionScopeDb> SessScopeToSessions { get; set; }

		#endregion
	}

	/// <summary>
	/// Info about session initiation
	/// </summary>
	[Table("session_initiations")]
	public partial class SessionInitiationDb
	{
		/// <summary>
		/// Session identifier (GUID)
		/// </summary>
		[Column("session_id"),         PrimaryKey,  NotNull] public string                                                       SessionId         { get; set; } // char(32)
		/// <summary>
		/// Redirect URI from request
		/// </summary>
		[Column("redirect_uri"),                    NotNull] public string                                                       RedirectUri       { get; set; } // varchar(2048)
		/// <summary>
		/// Statefrom request
		/// </summary>
		[Column("state"),                 Nullable         ] public string                                                       State             { get; set; } // varchar(512)
		/// <summary>
		/// Issued authorization code (GUID)
		/// </summary>
		[Column("authorization_code"),    Nullable         ] public string                                                       AuthorizationCode { get; set; } // char(32)
		/// <summary>
		/// Error code (from specification)  https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2.1
		/// </summary>
		[Column("error_code"),            Nullable         ] public MyAuth.OAuthPoint.Models.AuthorizationRequestProcessingError ErrorCode         { get; set; } // varchar(50)
		/// <summary>
		/// Error description
		/// </summary>
		[Column("error_desription"),      Nullable         ] public string                                                       ErrorDesription   { get; set; } // varchar(1024)
		/// <summary>
		/// When initiation was completed
		/// </summary>
		[Column("complete_dt"),           Nullable         ] public DateTime?                                                    CompleteDt        { get; set; } // datetime
		/// <summary>
		/// Request scope list (space separated)
		/// </summary>
		[Column("scope"),                           NotNull] public string                                                       Scope             { get; set; } // varchar(256)

		#region Associations

		/// <summary>
		/// FK_Initiation_To_Session
		/// </summary>
		[Association(ThisKey="SessionId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="FK_Initiation_To_Session", BackReferenceName="InitiationToSession")]
		public LoginSessionDb Session { get; set; }

		#endregion
	}

	/// <summary>
	/// Scopes which related to sessions
	/// </summary>
	[Table("session_scopes")]
	public partial class SessionScopeDb
	{
		[Column("id"),         PrimaryKey, Identity] public int    Id        { get; set; } // int
		/// <summary>
		/// Session identifier (GUID)
		/// </summary>
		[Column("session_id"), NotNull             ] public string SessionId { get; set; } // char(32)
		/// <summary>
		/// Scope name
		/// </summary>
		[Column("name"),       NotNull             ] public string Name      { get; set; } // varchar(50)
		/// <summary>
		/// &apos;Y&apos; if scope contains in required scope list. Else - auth server send it but will be ignored
		/// </summary>
		[Column("required"),   NotNull             ] public char   Required  { get; set; } // enum('Y','N')

		#region Associations

		/// <summary>
		/// FK_Claim_To_SessionScope_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SessionScope", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClaimDb> ClaimToSessionScopes { get; set; }

		/// <summary>
		/// FK_SessScope_To_Session
		/// </summary>
		[Association(ThisKey="SessionId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_SessScope_To_Session", BackReferenceName="SessScopeToSessions")]
		public LoginSessionDb Session { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static ClaimDb Find(this ITable<ClaimDb> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ClientDb Find(this ITable<ClientDb> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ClientRedirectUriDb Find(this ITable<ClientRedirectUriDb> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ClientScopeDb Find(this ITable<ClientScopeDb> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LoginSessionDb Find(this ITable<LoginSessionDb> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SessionInitiationDb Find(this ITable<SessionInitiationDb> table, string SessionId)
		{
			return table.FirstOrDefault(t =>
				t.SessionId == SessionId);
		}

		public static SessionScopeDb Find(this ITable<SessionScopeDb> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
